#!/usr/bin/python

import sys
import os
from optparse import OptionParser, Option
from itertools import islice, chain, izip

from tabkit.datasrc import DataDesc, DataField, DataOrder, DataFieldOrder, paste_data_desc
from tabkit.header import make_header
from tabkit.utils import safe_system, exception_handler, FilesList, OptUtils
from tabkit.awk import awk_filter_map

def main():
    optparser = OptionParser(
        usage = '%prog [options] [files]',
    )
    OptUtils.add_pytrace(optparser)
    OptUtils.add_print_cmd(optparser)
    OptUtils.add_awk_exec(optparser)
    OptUtils.add_no_out_header(optparser)
    optparser.add_option('--zip', action="store_true", help="Take 1st field from 1st file, then 1st field from 2nd file and so on")
    opts, args = optparser.parse_args()

    files = FilesList(args)
    
    if opts.zip:
        fields = []
        for i, (fname, desc) in enumerate(files.names_descs()):
            fields.append([DataField("%s_%s" % (name, i+1), ftype) for name, ftype in desc.fields])
        paste_desc = DataDesc(list(chain.from_iterable(fields)))
        output_exprs = [name for name, ftype in chain.from_iterable(izip(*fields))]
        awk_cmd, output_desc = awk_filter_map(paste_desc, [], output_exprs)
        cmd_line = "paste %s | %s" % (
            files.cmd_args_str(),
            awk_cmd.cmd_line(opts.awk_exec)
        )        
        if opts.print_cmd:
            sys.stderr.write(cmd_line + "\n")
        else:
            if not opts.no_out_header:
                os.write(sys.stdout.fileno(), make_header(output_desc))
            safe_system(cmd_line)
    else:
        out_desc = DataDesc([])
        for fname, desc in files.names_descs():
            out_desc = paste_data_desc(out_desc, desc)
            
        if opts.print_cmd:
            sys.stderr.write('paste %s\n' % (files.cmd_args_str(),))
        else:
            if not opts.no_out_header:
                os.write(sys.stdout.fileno(), make_header(out_desc))
            safe_system('paste %s' % (files.cmd_args_str(),))

if __name__ == '__main__':
    exception_handler(main)

