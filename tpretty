#!/usr/bin/python
# encoding: utf-8

import sys
import tempfile
from optparse import OptionParser
import re

from tabkit.header import parse_header, make_header


class ColWidthCalc(object):
    def __init__(self, digits=None, max_width=None, colored=False):
        self.col_widths = {}
        self.digits = digits if digits is not None else -1
        self.max_width = max_width or sys.maxint
        self.colored = colored

    def _trunc_digits(self, field):
        field = re.sub(r"Â±", r"±", field)  # для выдачи exp-stats
        number_matches = re.findall(r"\d+\.\d+", field)
        if number_matches:
            field_trunc = field
            for number in number_matches:
                number_trunc = re.sub(r"(\d+\.\d{%d})\d+" % self.digits, r"\g<1>", number)
                field_trunc = field_trunc.replace(number, number_trunc, 1)
            return field_trunc
        return field

    def _get_len(self, field):
        if self.colored:
            field_len = len(re.sub(r"\033\[[\d;]+m", r"", field))
        else:
            field_len = len(field)
        return field_len

    def __call__(self, lines):
        col_widths = self.col_widths
        for i, line in enumerate(lines):
            if i == 0 and line.startswith('#'):
                line = make_header(parse_header(line))
                fields = [field.name for field in parse_header(line).fields]
            else:
                fields = line.rstrip().split('\t')
            fields_trunc_digits = []
            for field_id, field in enumerate(fields):
                fld_trunc = self._trunc_digits(field)
                col_widths[field_id] = max(
                    col_widths.get(field_id, 0),
                    self._get_len(fld_trunc.decode('utf-8', 'replace'))
                )
                fields_trunc_digits.append(fld_trunc)
            if i == 0 and line.startswith('#'):
                yield line
            else:
                yield '\t'.join(fields_trunc_digits) + '\n'

    def get_widths(self):
        return [min(width, self.max_width) for field_id, width in sorted(self.col_widths.iteritems())]


def fmt_line(line, text_widths, colored):
    fields = [field.decode('utf8', 'replace') for field in line.rstrip().split('\t', len(text_widths) - 1)]

    if colored:
        esc_seq_widths = map(
            lambda esc_parts: sum(len(pt) for pt in esc_parts),
            (re.findall(r"\033\[[\d;]+m", field) for field in fields)
        )
        widths = map(lambda (fld_width, esc_seq_width): fld_width + esc_seq_width, zip(text_widths, esc_seq_widths))
    else:
        widths = text_widths

    fields_widths = zip(fields, widths)
    fmt_line = u' | '.join("%%-%ds" % (wid,) for field, wid in fields_widths)
    return (fmt_line % tuple(fields)).encode('utf8')


def main():
    optparser = OptionParser(usage="%prog [filename]")
    optparser.add_option("-d", "--digits", dest="digits", type="int", help="number of digits after decimal point")
    optparser.add_option('--max-width', '--mw', type="int", help="maximal width of a column")
    optparser.add_option('-c', '--colored', dest="colored", action='store_true',
                         help="process color anscii escape sequences")
    opts, args = optparser.parse_args()

    col_width_calc = ColWidthCalc(digits=opts.digits, max_width=opts.max_width, colored=opts.colored)
    tmpfile = tempfile.TemporaryFile()
    if not args:
        tmpfile.writelines(col_width_calc(sys.stdin))
    elif len(args) == 1:
        tmpfile.writelines(col_width_calc(open(args[0])))
    else:
        optparser.error('Wrong number of arguments')
    tmpfile.seek(0)

    fields = None
    for i, line in enumerate(tmpfile):
        if i == 0 and line.startswith('#'):
            fields = parse_header(line).fields
            line = '\t'.join(field.name for field in fields)
            print fmt_line(line, col_width_calc.get_widths(), opts.colored)
            print "|".join("-"*(w + 2) for w in col_width_calc.get_widths()[:len(fields)])[1:]
        else:
            print fmt_line(line, col_width_calc.get_widths()[:len(fields)], opts.colored)

if __name__ == '__main__':
    main()

