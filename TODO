- Общая модель чтения файлов для всего того (утилиты tcat, tcut, tsrt),
  для чего имеет смысл принимать на вход более одного файла.

- Нужно иметь режим для чтения входных фалов с stdin (аналог xargs cat),
  в тч zero-terminated input.

- Аналог опции pv и callback для работы со сжатыми файлами.

- Переписать кодогенерацию в tgrp_awk
  здесь серия проблем с областями видимости для функций и переменных
  
- Сформулировать ограничения для awk-генераторов
  и разделить функции на mawk и gawk - совместимые

- Постепенный отказ от awk-генераторов в пользу c++ генераторов
  В первую очередь, надо пересмотреть синтаксис, например каст кортежа в оператор конкатенации уродлив
  Кроме того, нужно обеспечить нативное python-api для генерации кода
  Генерация может вполне себе быть и в питонячий код, иногда это полезно.

- глобальные переменные в tmap_awk/tgrp_awk, что-то вроде:
  tmap_awk \
     -v 'key_cnt=-1; _prev_key=""' \
     -o 'key_cnt=key_cnt+1 if(key==_prev_key) else -1'
     -o '_prev_key=key'

- tmap_awk -f 'val in set([1,2,3])' - по смыслу то же, что и 'val in [1,2,3]',
  но с использованием ассоц. массивов
  сейчас есть в виде конструкции is_in_file

Питонячья библиотека:
- быстрый парсер tsv, не проводящий безусловный каст всего подряд
  вопрос скорее в том, как это интерфейсно должно выглядеть.

- интерфейс для формирования вывода
  типичный кейс: rec на входе, используется поднабор полей, часть удаляется, часть обновляется
  сигнатуры заголовка и порядок полей в соответствующем write не согласованы
